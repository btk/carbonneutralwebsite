import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import Header from '../components/Header'
import post from '../js/post'
import get from '../js/get'
import { useState, useEffect } from 'react'
import { Button, Text, Container, Card, Row, Spacer  } from '@nextui-org/react';

const CARBON_PER_KB = 0.000845703125; // g
const TREE_EMISSON_PER_YEAR = 24000.00;// g
const CARBON_PER_PAGE_LOAD_ON_DEVICE = 0.002183706; // g
const OVERALL_LIGHTHOUSE_SCORE_EFFECT = 20; // out of 100

export default function Home() {
  const [url, setUrl] = useState("");
  const [pageView, setPageView] = useState(10000);
  const [ratio, setRatio] = useState(40);
  const [calculating, setCalculating] = useState(false);
  const [results, setResults] = useState({});
  const [pageSize, setPageSize] = useState({});
  const [footPrint, setFootPrint] = useState({});
  const [hostData, setHostData] = useState(null);

  let calculate = async () => {
    setCalculating(true);
    setHostData(null);
    setResults({});
    setFootPrint({});
    fetchHostData();

    const env = process.env.NODE_ENV
    let calculation
    if(env == "development" && url == ""){
      calculation = await get("/test.json");
    }else{
      calculation = await post("/api/calculate", {url})
    }

    let pageSizeInKb = calculatePageSize(calculation.audits["network-requests"].details.items);
    console.log(pageSizeInKb);
    setPageSize(pageSizeInKb);
    setResults(calculation);

    let calculatedFootPrint = calculateCarbonFootPrint(pageSizeInKb, calculation.score);
    setFootPrint(calculatedFootPrint);
    console.log("footPrint", calculatedFootPrint);
    setCalculating(false);
  }

  let fetchHostData = async () => {
    let fetchedHostData = await post("/api/location", {url});
    setHostData(fetchedHostData);
  }

  let calculatePageSize = (items) => {
    let totalInByte = 0;
    let totalInByteWithoutStatic = 0;
    items.forEach((item, i) => {
      if(item.finished){
        totalInByte += item.transferSize;
        if(item.resourceType == "Document" || item.resourceType == "Script" || item.resourceType == "Other"){
          totalInByteWithoutStatic += item.transferSize;
        }
      }
    });

    return {firstVisit: totalInByte / 1000, returningVisit: totalInByteWithoutStatic / 1000};
  }

  let calculateCarbonFootPrint = (pageSizeInKb, performanceScore) => {
    let performancePunishment = 1 + (1-performanceScore/100) / OVERALL_LIGHTHOUSE_SCORE_EFFECT;
    console.log("performancePunishment", performancePunishment);
    let firstVisitImpactKb = pageSizeInKb.firstVisit * performancePunishment;
    let returningVisitImpactKb = pageSizeInKb.returningVisit * performancePunishment;


    let firstVisitCarbon = firstVisitImpactKb * CARBON_PER_KB;
    let returningVisitCarbon = returningVisitImpactKb * CARBON_PER_KB;
    let totalImpactInCarbon = firstVisitCarbon * pageView * ratio + returningVisitCarbon * pageView * (100 - ratio);

    return {
      sizeInKb: {firstVisit: pageSizeInKb.firstVisit, returningVisit: pageSizeInKb.returningVisit},
      impactInKb: {firstVisit: firstVisitImpactKb, returningVisit: returningVisitImpactKb},
      impactInCarbon: {firstVisit: firstVisitCarbon, returningVisit: returningVisitCarbon},
      totalImpactInCarbon: totalImpactInCarbon,
      treeToOffset: totalImpactInCarbon / TREE_EMISSON_PER_YEAR + pageView * CARBON_PER_PAGE_LOAD_ON_DEVICE / TREE_EMISSON_PER_YEAR,
    };
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Carbon Neutral Website</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.hero}>
        <div className={styles.heroContent}>
        <>
          <Text
            h1
            size={40}
            css={{
              textGradient: "45deg, $green600 -20%, $blue600 50%",
            }}
            weight="bold"
          >
            Calculate Your Website's
          </Text>
          <Text
            h1
            size={40}
            css={{
              textGradient: "45deg, $blue600 -20%, $green600 100%",
            }}
            weight="bold"
          >
            Carbon Footprint
          </Text>
      </>
          <p>URL: <input type="text" onChange={(e) => setUrl(e.target.value)}/></p>
          <p>Yearly Pageview: <input type="number" value={pageView} onChange={(e) => setPageView(e.target.value)}/></p>
          <p>New PageView Ratio: <input type="range" value={ratio} min="1" max="100" onChange={(e) => setRatio(e.target.value)}/> {ratio}%<  /p>
          {!calculating && <Button size="lg" onClick={() => calculate()}>Calculate</Button>}
          {calculating && <div style={{color: "blue"}}>Calculating...</div>}
          {footPrint.impactInCarbon &&
            <div>
              <p>Performance Score: <b>{results.score} / 100</b></p>
              <p></p>
              <p>FirstVisit Load Kb: {footPrint.sizeInKb.firstVisit} kB</p>
              <p>ReturningVisit Load Kb: {footPrint.sizeInKb.returningVisit} kB</p>
              <p></p>

              <p>FirstVisit Natural Impact Kb: {footPrint.impactInKb.firstVisit} kB</p>
              <p>ReturningVisit Natural Impact Kb: {footPrint.impactInKb.returningVisit} kB</p>
              <p></p>

              <p>FirstVisit Carbon Footprint: {footPrint.impactInCarbon.firstVisit} g</p>
              <p>ReturningVisit Carbon Footprint: {footPrint.impactInCarbon.returningVisit} g</p>
              <p></p>

              <p>Total Impact in Carbon: {footPrint.totalImpactInCarbon / 1000} kg/yr</p>
              <p><big>Tree to offset: <b>{Math.ceil(footPrint.treeToOffset)} Trees</b></big></p>
            </div>
          }

          {hostData != null &&
            <div>
              <p>{hostData.city} {hostData.country}, {hostData.countryCode}</p>
              <p>ISP: {hostData.isp}</p>
            </div>
          }
        </div>
      </div>

      <Container>
       <Card css={{ $$cardColor: '$colors$gray900' }}>
         <Card.Body>
           <Row justify="center" align="center">
             <Text h6 size={15} color="white" css={{ m: 0 }}>
               NextUI gives you the best developer experience with all the features
               you need for building beautiful and modern websites and
               applications.
             </Text>
           </Row>
           <Row justify="center" align="center">
             <Text h6 size={15} color="white" css={{ m: 0 }}>
               NextUI gives you the best developer experience with all the features
               you need for building beautiful and modern websites and
               applications.
             </Text>
           </Row>
         </Card.Body>

       </Card>
       <Spacer y={1} />

        <Card css={{ $$cardColor: '$colors$gray900' }}>
          <Card.Body>
            <Row justify="center" align="center">
              <Text h6 size={15} color="white" css={{ m: 0 }}>
                NextUI gives you the best developer experience with all the features
                you need for building beautiful and modern websites and
                applications.
              </Text>
            </Row>
            <Row justify="center" align="center">
              <Text h6 size={15} color="white" css={{ m: 0 }}>
                NextUI gives you the best developer experience with all the features
                you need for building beautiful and modern websites and
                applications.
              </Text>
            </Row>
          </Card.Body>

        </Card>
       </Container>
    </div>
  )
}
